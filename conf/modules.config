/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: FASTQC {
        ext.args   = '--quiet'
        publishDir = [
            path: { "${params.outdir}/fastqc" },
            mode: params.publish_dir_mode,
            pattern: "*.html"
        ]
        ext.prefix = { "${meta.id}_raw" }
        tag        = { "${meta.id}_raw" }
    }

    withName: FASTP {
        ext.args   = [
            "-q ${params.fastp_phred_quality}",
            "--cut_front",
            "--cut_tail",
            "--cut_mean_quality ${params.fastp_cut_mean_quality}",
            "--length_required ${params.reads_minlength}"
        ].join(' ').trim()
        publishDir = [
            [
                path: { "${params.outdir}/fastp/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: "*.{html,json}"
            ],
            [
                path: { "${params.outdir}/fastp/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: "*.fastq.gz",
            ]
        ]
        ext.prefix = { "${meta.id}_trimmed" }
        tag        = { "${meta.id}_trim" }
    }

    withName: MEGAHIT {
        ext.args   = [
            "--k-list ${params.megahit_kmer_list}",
            "--min-contig-len ${params.megahit_min_contig_len}"
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/Assembly" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                filename.equals('versions.yml')
                    ? null
                    : filename.indexOf('.contigs.fa.gz') > 0
                        ? filename
                        : filename.indexOf('.log') > 0 ? filename : null
            }
        ]
        ext.prefix = { "${meta.id}_assembled" }
        tag        = { "${meta.id}_assembly" }
    }

    withName: BWA_INDEX {
        publishDir = [
            path: { "${params.outdir}/bwa/index" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                if (filename.equals('versions.yml')) return null
                return filename.startsWith('bwa/') ? filename.substring(4) : filename
            }
        ]
        ext.prefix = { "${meta.id}_index" }
        tag        = { "${meta.id}_index" }
    }

    withName: BWA_MEM {
        publishDir = [
            path: { "${params.outdir}/bwa/aligned" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename
            }
        ]
        ext.prefix = { "${meta.id}_aligned" }
        tag        = { "${meta.id}_align" }
    }

    withName: SAMTOOLS_INDEX {
        publishDir = [
            path: { "${params.outdir}/samtools/indexed" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename
            }
        ]
        ext.prefix = { "${meta.id}_indexed" }
        tag        = { "${meta.id}_index" }
    }

    withName: METABAT2_JGISUMMARIZEBAMCONTIGDEPTHS {
        publishDir = [
            path: { "${params.outdir}/metabat2/depth" },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                if (filename.equals('versions.yml')) return null
                return filename
            }
        ]
        ext.prefix = { "${meta.id}_depth" }
        tag        = { "${meta.id}_depth" }
    }

    withName: METABAT2_METABAT2 {
        ext.args   = [
            "--minContig ${params.metabat2_min_contig_len}",
            "--seed ${params.metabat2_seed}"
        ].join(' ').trim()
        publishDir = [
            [
                path: { "${params.outdir}/metabat2/bins/${meta.id}/tooShort" },
                mode: params.publish_dir_mode,
                pattern: "*.tooShort.fa.gz"
            ],
            [
                path: { "${params.outdir}/metabat2/bins/${meta.id}/lowDepth" },
                mode: params.publish_dir_mode,
                pattern: "*.lowDepth.fa.gz"
            ],
            [
                path: { "${params.outdir}/metabat2/bins/${meta.id}/unbinned" },
                mode: params.publish_dir_mode,
                pattern: "*.unbinned.fa.gz"
            ],
            [
                path: { "${params.outdir}/metabat2/bins/${meta.id}/membership" },
                mode: params.publish_dir_mode,
                pattern: "*.tsv.gz"
            ],
            [
                path: { "${params.outdir}/metabat2/bins/${meta.id}/bins" },
                mode: params.publish_dir_mode,
                pattern: "*[!lowDepth|tooShort|unbinned].fa.gz"
            ]
        ]
        ext.prefix = { "${meta.id}_bin" }
        tag        = { "${meta.id}_binning" }
    }

    withName: MULTIQC {
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename
            }
        ]
        ext.prefix = "multiqc_report"
        tag        = 'MULTIQC'
    }
}
